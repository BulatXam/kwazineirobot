from aiogram import Router, F
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from src.keyboards import chatgpt as chatgpt_keyboards

from src.states import neirochat as neirochat_states

router = Router(name="neirochat")


@router.message(F.text == "üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")
async def gen_text(message: Message, state: FSMContext):
    await message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.",
        reply_markup=chatgpt_keyboards.gen_text_choice_model
    )


@router.callback_query(F.data.startswith() == "generate_text")
async def gen_text(call: CallbackQuery, state: FSMContext):
    pass


@router.message(neirochat_states.NeiroChatStates.waiting_for_text_prompt)
async def handle_text_prompt(message: Message, state: FSMContext):
    user_prompt = message.text

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
    generated_text = f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {user_prompt}"

    await message.answer(
        text=generated_text
    )
    user = await User.get(user_id=message.from_user.id)
    await GeneratedText.create(
        author=user,
        prompt=user_prompt,
        content=generated_text
    )

    await state.clear()


@router.message(F.text == "üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
async def gen_image(message: Message, state: FSMContext):
    await message.answer(
        text="üñºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞."
    )

    await state.set_state(neirochat_states.NeiroChatStates.waiting_for_image_prompt)


@router.message(neirochat_states.NeiroChatStates.waiting_for_image_prompt)
async def handle_image_prompt(message: Message, state: FSMContext):
    user_prompt = message.text

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É
    image_file = FSInputFile(
        STATIC_DIR / "404.jpg",
        filename="generated_image.png"
    )

    try:
        await message.answer_photo(
            photo=image_file,
            caption=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {user_prompt}"
        )
        user = await User.get(user_id=message.from_user.id)
        await GeneratedImage.create(
            author=user,
            prompt=user_prompt,
            image_path=STATIC_DIR / "404.jpg"
        )
    except TelegramBadRequest as e:
        await message.answer(
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

    await state.clear()

# rulers 80
